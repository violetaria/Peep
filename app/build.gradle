apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "com.getlosthere.apps.peep"
        minSdkVersion 16
        targetSdkVersion 24
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "CONSUMER_KEY", "\""+getConsumerKey()+"\""
            variant.buildConfigField "String", "SECRET_KEY", "\""+getSecretKey()+"\""
        }
    }
}

repositories {
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile('com.codepath.libraries:android-oauth-handler:1.0.0@aar') {
        transitive = true
    }
    compile 'com.android.support:appcompat-v7:24.0.0'
    // Picasso for remote image loading
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'jp.wasabeef:picasso-transformations:2.1.0'
    // Android Async Http for sending async network requests
    compile 'com.loopj.android:android-async-http:1.4.9'
    // ActiveAndroid for simple persistence with an ORM
    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
    // Recycler View
    compile 'com.android.support:recyclerview-v7:23.2.1'
    // Parceler
    compile 'org.parceler:parceler-api:1.1.1'
    apt 'org.parceler:parceler:1.1.1'

}


def getConsumerKey(){
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['CONSUMER_KEY']
}


def getSecretKey(){
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['SECRET_KEY']
}